import * as XLSX from "xlsx";
import { RESET_LINEAR_REGRESSION } from "../../constants/optimizationConstants";

export const handleFileChange = (e, setPlotProcessData, dispatch) => {
  const file = e.target.files[0];
  const reader = new FileReader();
  reader.onload = (event) => {
    const binaryData = event.target.result;
    const workbook = XLSX.read(binaryData, { type: "binary" });
    const worksheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[worksheetName];
    const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    const headers = data[0]; // Assuming headers are in the first row
    const jsonData = {};

    // Initialize arrays for each column based on the header names
    headers.forEach((header) => {
      jsonData[header] = [];
    });

    data.slice(1).forEach((row) => {
      row.forEach((value, index) => {
        const header = headers[index];
        if (header) {
          // Ignore columns beyond the headers
          jsonData[header].push(value);
        }
      });
    });

    const columnNames = Object.keys(jsonData);

    setPlotProcessData({
      processData: jsonData,
      xAxisVar: columnNames[0],
      yAxisVar: columnNames[1],
      zAxisVar: columnNames[2],
    });

    localStorage.setItem("processData", JSON.stringify(jsonData));

    dispatch({ type: RESET_LINEAR_REGRESSION });
  };
  reader.readAsBinaryString(file);
};

export const handleDownloadReport = (linearRegression) => {
  const { model_params, model_metrics, data_split, features, preprocessing } =
    linearRegression;

  const username =
    JSON.parse(localStorage.getItem("username")) || "Unknown User";
  const currentDate = new Date().toLocaleDateString();

  let reportContent = `Report Generated by: ${username}\nDate: ${currentDate}\n\n`;

  reportContent += "Model Parameters:\n";
  Object.keys(model_params).forEach((param) => {
    reportContent += `${param}: ${model_params[param].toFixed(3)}\n`;
  });

  reportContent += "\nModel Metrics:\n";
  Object.entries(model_metrics).forEach(([key, value]) => {
    reportContent += `${key.toUpperCase()}: ${value.toFixed(3)}\n`;
  });

  reportContent += "\nData Split Information:\n";
  Object.entries(data_split).forEach(([key, value]) => {
    reportContent += `${key.replace("_", " ").toUpperCase()}: ${value}\n`;
  });

  reportContent += "\nFeatures:\n";
  reportContent += `Dependent Variable: ${features.dependent_variable}\n`;
  reportContent += `Independent Variables: ${features.independent_variables.join(
    ", "
  )}\n`;

  reportContent += "\nPreprocessing:\n";
  Object.entries(preprocessing).forEach(([key, value]) => {
    reportContent += `${key.replace("_", " ").toUpperCase()}: ${value}\n`;
  });

  // Creating a Blob from the report content
  const blob = new Blob([reportContent], { type: "text/plain;charset=utf-8" });

  // Creating a link element to download the Blob
  const link = document.createElement("a");
  const url = URL.createObjectURL(blob);
  link.href = url;
  link.download = `LinearRegressionAnalysisReport_${currentDate.replace(
    /\//g,
    "-"
  )}.txt`;

  // Triggering the download
  document.body.appendChild(link);
  link.click();

  // Cleaning up
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};
